#! /usr/bin/env python

"""Archive a directory of files to a tar file.

Default is to gzip as well.

The tar file will:
    * be put in the same parent directory as the directory being archived
    * have the name of the directory's basename, plus .tar or .tar.gz
    * be compressed with gzip (.tar.gz) unless -u option is provided

This relies on a tar with gzip compression built in unless -u is specified.

File removal relies on an 'rm' with '-r' and '-f' options.

You can preview what would be done (i.e. commands that would be run)
by specifying the '--dry-run' option.
"""

import sys
import argparse
import os.path
import subprocess

def main(options):
    """Main program."""
    path = options.path.strip('/')
    if not os.path.isdir(path):
        raise StandardError('%s does not exist or is not a directory.' % path)
    parent, basename = os.path.split(path)
    tarname = basename + '.tar'
    if options.gzip:
        tarname += '.gz'
    if parent:
        os.chdir(parent)
    if os.path.exists(tarname):
        raise StandardError('Tar file %s already exists' % tarname)


    if options.dry_run:
        sys.stderr.write("DRY RUN: Nothing will actually happen to your filesystem as --dry-run or -D was specified\n")

    sys.stderr.write("Commands are run in directory: %s\n" % os.getcwd())
    tar_cmd = ['tar', '-c']
    if options.gzip:
        tar_cmd.append('-z')
    if options.verbose_tar:
        tar_cmd.append('-v')
    tar_cmd.extend(['-f', tarname, basename])

    print_and_run(tar_cmd, options)

    if options.then_remove:
        rm_cmd = ['rm', '-r']
        if options.force_removal:
            rm_cmd.append('-f')
        rm_cmd.append(basename)
        print_and_run(rm_cmd, options)
    return

def print_and_run(cmd, options):
    """Output command to run on stderr.  Then run it if not --dry-run.

    subprocess.check_call is used to ensure hard failure if command fails.
    """
    if options.dry_run:
        sys.stderr.write('WOULD RUN: %r\n' % cmd)
    else:
        sys.stderr.write('RUNNING: %r\n' % cmd)
        subprocess.check_call(cmd)

def get_options():
    """Get options for the script."""
    parser = argparse.ArgumentParser(
               description="archive a directory of files to a tar file",
             )
    parser.add_argument('path', help='path to directory to archive')
    parser.add_argument('-u', '--uncompressed', action='store_true', default=False, help='disable gzip compression')
    parser.add_argument('-v', '--verbose-tar', action='store_true', default=False, help='make tar verbose')
    parser.add_argument('-R', '--then-remove', default=False, action='store_true', help='remove path afterwards')
    parser.add_argument('-f', '--force-removal', default=False, action='store_true', help='remove path with -f (only with -R)')
    parser.add_argument('-D', '--dry-run', default=False, action='store_true', help="don't actually do anything - just print what would happen")

    options = parser.parse_args()

    options.gzip = not options.uncompressed
    return options

if __name__ == "__main__":
    main(get_options())
